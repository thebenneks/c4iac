"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLangiumDocuments = exports.DefaultLangiumDocumentFactory = exports.DefaultTextDocumentFactory = exports.DocumentState = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode_uri_1 = require("vscode-uri");
const stream_1 = require("../utils/stream");
/**
 * A document is subject to several phases that are run in predefined order. Any state value implies that
 * smaller state values are finished as well.
 */
var DocumentState;
(function (DocumentState) {
    /**
     * The text content has changed and needs to be parsed again. The AST held by this outdated
     * document instance is no longer valid.
     */
    DocumentState[DocumentState["Changed"] = 0] = "Changed";
    /**
     * An AST has been created from the text content. The document structure can be traversed,
     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated
     * at this stage as a preprocessing step.
     */
    DocumentState[DocumentState["Parsed"] = 1] = "Parsed";
    /**
     * The `IndexManager` service has processed AST nodes of this document. This means the
     * exported symbols are available in the global scope and can be resolved from other documents.
     */
    DocumentState[DocumentState["IndexedContent"] = 2] = "IndexedContent";
    /**
     * The `ScopeComputation` service has processed this document. This means the local symbols
     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.
     * Once a document has reached this state, you may follow every reference - it will lazily
     * resolve its `ref` property and yield either the target AST node or `undefined` in case
     * the target is not in scope.
     */
    DocumentState[DocumentState["ComputedScopes"] = 3] = "ComputedScopes";
    /**
     * The `Linker` service has processed this document. All outgoing references have been
     * resolved or marked as erroneous.
     */
    DocumentState[DocumentState["Linked"] = 4] = "Linked";
    /**
     * The `IndexManager` service has processed AST node references of this document. This is
     * necessary to determine which documents are affected by a change in one of the workspace
     * documents.
     */
    DocumentState[DocumentState["IndexedReferences"] = 5] = "IndexedReferences";
    /**
     * The `DocumentValidator` service has processed this document. The language server listens
     * to the results of this phase and sends diagnostics to the client.
     */
    DocumentState[DocumentState["Validated"] = 6] = "Validated";
})(DocumentState = exports.DocumentState || (exports.DocumentState = {}));
/**
 * @deprecated This service implementation is no longer necessary and will be removed.
 */
class DefaultTextDocumentFactory {
    constructor(services) {
        this.serviceRegistry = services.ServiceRegistry;
        this.fileSystemProvider = services.workspace.FileSystemProvider;
    }
    fromUri(uri) {
        const content = this.getContent(uri);
        const services = this.serviceRegistry.getServices(uri);
        return vscode_languageserver_textdocument_1.TextDocument.create(uri.toString(), services.LanguageMetaData.languageId, 0, content);
    }
    getContent(uri) {
        return this.fileSystemProvider.readFileSync(uri);
    }
}
exports.DefaultTextDocumentFactory = DefaultTextDocumentFactory;
class DefaultLangiumDocumentFactory {
    constructor(services) {
        this.serviceRegistry = services.ServiceRegistry;
    }
    fromTextDocument(textDocument, uri) {
        return this.create(textDocument, undefined, undefined, uri);
    }
    fromString(text, uri) {
        return this.create(undefined, text, undefined, uri);
    }
    fromModel(model, uri) {
        return this.create(undefined, undefined, model, uri);
    }
    create(textDocument, text, model, uri) {
        if (uri === undefined) {
            uri = vscode_uri_1.URI.parse(textDocument.uri);
        }
        const services = this.serviceRegistry.getServices(uri);
        let parseResult;
        if (model === undefined) {
            parseResult = services.parser.LangiumParser.parse(text !== null && text !== void 0 ? text : textDocument.getText());
        }
        else {
            parseResult = { value: model, parserErrors: [], lexerErrors: [] };
        }
        return this.createLangiumDocument(parseResult, uri, textDocument !== null && textDocument !== void 0 ? textDocument : {
            $template: true,
            languageId: services.LanguageMetaData.languageId,
            uri,
            text
        });
    }
    /**
     * Create a LangiumDocument from a given parse result.
     *
     * A TextDocument is created on demand if it is not provided as argument here. Usually this
     * should not be necessary because the main purpose of the TextDocument is to convert between
     * text ranges and offsets, which is done solely in LSP request handling.
     */
    createLangiumDocument(parseResult, uri, textDocument) {
        let textDoc = undefined;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const factory = this;
        const doc = {
            parseResult,
            uri: uri,
            state: DocumentState.Parsed,
            references: [],
            get textDocument() {
                if (!textDoc) {
                    textDoc = textDocument.$template
                        ? factory.createTextDocument(textDocument)
                        : textDocument;
                }
                return textDoc;
            }
        };
        parseResult.value.$document = doc;
        return doc;
    }
    createTextDocument(template) {
        var _a;
        return vscode_languageserver_textdocument_1.TextDocument.create(template.uri.toString(), template.languageId, 0, (_a = template.text) !== null && _a !== void 0 ? _a : '');
    }
}
exports.DefaultLangiumDocumentFactory = DefaultLangiumDocumentFactory;
class DefaultLangiumDocuments {
    constructor(services) {
        this.documentMap = new Map();
        this.textDocuments = services.workspace.TextDocuments;
        this.fileSystemProvider = services.workspace.FileSystemProvider;
        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;
    }
    get all() {
        return (0, stream_1.stream)(this.documentMap.values());
    }
    addDocument(document) {
        const uriString = document.uri.toString();
        if (this.documentMap.has(uriString)) {
            throw new Error(`A document with the URI '${uriString}' is already present.`);
        }
        this.documentMap.set(uriString, document);
    }
    getOrCreateDocument(uri) {
        const uriString = uri.toString();
        let langiumDoc = this.documentMap.get(uriString);
        if (langiumDoc) {
            // The document is already present in our map
            return langiumDoc;
        }
        const textDoc = this.textDocuments.get(uriString);
        if (textDoc) {
            // The document is managed by the TextDocuments service, which means it is opened in the editor
            langiumDoc = this.langiumDocumentFactory.fromTextDocument(textDoc, uri);
        }
        else {
            // Load the document from file
            langiumDoc = this.langiumDocumentFactory.fromString(this.getContent(uri), uri);
        }
        this.documentMap.set(uriString, langiumDoc);
        return langiumDoc;
    }
    getContent(uri) {
        return this.fileSystemProvider.readFileSync(uri);
    }
    hasDocument(uri) {
        return this.documentMap.has(uri.toString());
    }
    invalidateDocument(uri) {
        const uriString = uri.toString();
        const langiumDoc = this.documentMap.get(uriString);
        if (langiumDoc) {
            langiumDoc.state = DocumentState.Changed;
            this.documentMap.delete(uriString);
        }
    }
}
exports.DefaultLangiumDocuments = DefaultLangiumDocuments;
//# sourceMappingURL=documents.js.map