"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultReferencesProvider = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const ast_util_1 = require("../utils/ast-util");
const cst_util_1 = require("../utils/cst-util");
class DefaultReferencesProvider {
    constructor(services) {
        this.nameProvider = services.references.NameProvider;
        this.references = services.references.References;
        this.grammarConfig = services.parser.GrammarConfig;
    }
    findReferences(document, params) {
        const rootNode = document.parseResult.value.$cstNode;
        if (!rootNode) {
            return [];
        }
        const selectedNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, document.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
        if (!selectedNode) {
            return [];
        }
        const refs = this.getReferences(selectedNode, params, document);
        return refs;
    }
    getReferences(selectedNode, params, document) {
        const refs = [];
        const targetAstNode = this.references.findDeclaration(selectedNode);
        if (targetAstNode) {
            const options = { includeDeclaration: params.context.includeDeclaration };
            this.references.findReferences(targetAstNode, options).forEach(reference => {
                if ((0, ast_util_1.isReference)(reference)) {
                    refs.push(vscode_languageserver_1.Location.create(document.uri.toString(), reference.$refNode.range));
                }
                else {
                    refs.push(vscode_languageserver_1.Location.create(reference.sourceUri.toString(), reference.segment.range));
                }
            });
        }
        return refs;
    }
}
exports.DefaultReferencesProvider = DefaultReferencesProvider;
//# sourceMappingURL=references-provider.js.map