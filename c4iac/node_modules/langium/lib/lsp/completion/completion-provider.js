"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultCompletionProvider = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const ast = __importStar(require("../../grammar/generated/ast"));
const internal_grammar_util_1 = require("../../grammar/internal-grammar-util");
const ast_util_1 = require("../../utils/ast-util");
const cst_util_1 = require("../../utils/cst-util");
const grammar_util_1 = require("../../utils/grammar-util");
const stream_1 = require("../../utils/stream");
const follow_element_computation_1 = require("./follow-element-computation");
class DefaultCompletionProvider {
    constructor(services) {
        this.scopeProvider = services.references.ScopeProvider;
        this.grammar = services.Grammar;
        this.completionParser = services.parser.CompletionParser;
        this.nameProvider = services.references.NameProvider;
        this.grammarConfig = services.parser.GrammarConfig;
    }
    async getCompletion(document, params) {
        const root = document.parseResult.value;
        const cst = root.$cstNode;
        if (!cst) {
            return undefined;
        }
        let items = [];
        const textDocument = document.textDocument;
        const text = textDocument.getText();
        const offset = textDocument.offsetAt(params.position);
        const acceptor = (value, item) => {
            const completionItem = this.fillCompletionItem(textDocument, offset, value, item);
            if (completionItem) {
                items.push(completionItem);
            }
        };
        const node = (0, cst_util_1.findLeafNodeAtOffset)(cst, this.backtrackToAnyToken(text, offset));
        if (!node) {
            const parserRule = (0, grammar_util_1.getEntryRule)(this.grammar);
            await this.completionForRule(undefined, parserRule, acceptor);
            return vscode_languageserver_1.CompletionList.create(items, true);
        }
        const parserStart = this.backtrackToTokenStart(text, offset);
        const beforeFeatures = this.findFeaturesAt(textDocument, parserStart);
        let afterFeatures = [];
        const reparse = offset !== parserStart;
        if (reparse) {
            afterFeatures = this.findFeaturesAt(textDocument, offset);
        }
        const distinctionFunction = (element) => {
            if (ast.isKeyword(element.feature)) {
                return element.feature.value;
            }
            else {
                return element.feature;
            }
        };
        await Promise.all((0, stream_1.stream)(beforeFeatures)
            .distinct(distinctionFunction)
            .map(e => this.completionFor(node.element, e, acceptor)));
        if (reparse) {
            const missingPart = textDocument.getText({
                start: textDocument.positionAt(parserStart),
                end: params.position
            }).toLowerCase();
            // Remove items from `beforeFeatures` which don't fit the current text
            items = items.filter(e => e.label.toLowerCase().startsWith(missingPart));
            await Promise.all((0, stream_1.stream)(afterFeatures)
                .exclude(beforeFeatures, distinctionFunction)
                .distinct(distinctionFunction)
                .map(e => this.completionFor(node.element, e, acceptor)));
        }
        return vscode_languageserver_1.CompletionList.create(items, true);
    }
    findFeaturesAt(document, offset) {
        const text = document.getText({
            start: vscode_languageserver_1.Position.create(0, 0),
            end: document.positionAt(offset)
        });
        const parserResult = this.completionParser.parse(text);
        const tokens = parserResult.tokens;
        // If the parser didn't parse any tokens, return the next features of the entry rule
        if (parserResult.tokenIndex === 0) {
            const parserRule = (0, grammar_util_1.getEntryRule)(this.grammar);
            const firstFeatures = (0, follow_element_computation_1.findFirstFeatures)({
                feature: parserRule.definition,
                new: true,
                type: (0, internal_grammar_util_1.getExplicitRuleType)(parserRule)
            });
            if (tokens.length > 0) {
                // We have to skip the first token
                // The interpreter will only look at the next features, which requires every token after the first
                tokens.shift();
                return (0, follow_element_computation_1.findNextFeatures)(firstFeatures.map(e => [e]), tokens);
            }
            else {
                return firstFeatures;
            }
        }
        const leftoverTokens = [...tokens].splice(parserResult.tokenIndex);
        const features = (0, follow_element_computation_1.findNextFeatures)([parserResult.elementStack.map(feature => ({ feature }))], leftoverTokens);
        return features;
    }
    backtrackToAnyToken(text, offset) {
        if (offset >= text.length) {
            offset = text.length - 1;
        }
        while (offset > 0 && /\s/.test(text.charAt(offset))) {
            offset--;
        }
        return offset;
    }
    backtrackToTokenStart(text, offset) {
        if (offset < 1) {
            return offset;
        }
        const wordRegex = this.grammarConfig.nameRegexp;
        let lastCharacter = text.charAt(offset - 1);
        while (offset > 0 && wordRegex.test(lastCharacter)) {
            offset--;
            lastCharacter = text.charAt(offset - 1);
        }
        return offset;
    }
    async completionForRule(astNode, rule, acceptor) {
        if (ast.isParserRule(rule)) {
            const firstFeatures = (0, follow_element_computation_1.findFirstFeatures)(rule.definition);
            await Promise.all(firstFeatures.map(next => this.completionFor(astNode, next, acceptor)));
        }
    }
    completionFor(astNode, next, acceptor) {
        if (ast.isKeyword(next.feature)) {
            return this.completionForKeyword(next.feature, astNode, acceptor);
        }
        else if (ast.isCrossReference(next.feature) && astNode) {
            return this.completionForCrossReference(next, astNode, acceptor);
        }
    }
    completionForCrossReference(crossRef, context, acceptor) {
        const assignment = (0, ast_util_1.getContainerOfType)(crossRef.feature, ast.isAssignment);
        if (assignment) {
            if (crossRef.type && (crossRef.new || (context === null || context === void 0 ? void 0 : context.$type) !== crossRef.type)) {
                context = {
                    $type: crossRef.type,
                    $container: context,
                    $containerProperty: crossRef.property
                };
            }
            if (!context) {
                return;
            }
            const refInfo = {
                reference: {},
                container: context,
                property: assignment.feature
            };
            try {
                const scope = this.scopeProvider.getScope(refInfo);
                const duplicateStore = new Set();
                scope.getAllElements().forEach(e => {
                    if (!duplicateStore.has(e.name) && this.filterCrossReference(e)) {
                        acceptor(e, this.createReferenceCompletionItem(e));
                        duplicateStore.add(e.name);
                    }
                });
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Override this method to change how reference completion items are created.
     * Most notably useful to change the `kind` property which indicates which icon to display on the client.
     *
     * @param nodeDescription The description of a reference candidate
     * @returns A partial completion item
     */
    createReferenceCompletionItem(nodeDescription) {
        return {
            kind: vscode_languageserver_1.CompletionItemKind.Reference,
            detail: nodeDescription.type,
            sortText: '0'
        };
    }
    filterCrossReference(_nodeDescription) {
        return true;
    }
    completionForKeyword(keyword, context, acceptor) {
        // Filter out keywords that do not contain any word character
        if (!keyword.value.match(/[\w]+/)) {
            return;
        }
        acceptor(keyword.value, { kind: vscode_languageserver_1.CompletionItemKind.Keyword, detail: 'Keyword', sortText: /\w/.test(keyword.value) ? '1' : '2' });
    }
    fillCompletionItem(document, offset, value, info) {
        let label;
        if (typeof value === 'string') {
            label = value;
        }
        else if ((0, ast_util_1.isAstNode)(value)) {
            const name = this.nameProvider.getName(value);
            if (!name) {
                return undefined;
            }
            label = name;
        }
        else if (!(0, ast_util_1.isAstNode)(value)) {
            label = value.name;
        }
        else {
            return undefined;
        }
        const textEdit = this.buildCompletionTextEdit(document, offset, label);
        if (!textEdit) {
            return undefined;
        }
        const item = Object.assign({ label, textEdit }, info);
        return item;
    }
    buildCompletionTextEdit(document, offset, completion) {
        let negativeOffset = 0;
        const content = document.getText();
        const contentLowerCase = content.toLowerCase();
        const completionLowerCase = completion.toLowerCase();
        for (let i = completionLowerCase.length; i > 0; i--) {
            const contentLowerCaseSub = contentLowerCase.substring(offset - i, offset);
            if (completionLowerCase.startsWith(contentLowerCaseSub) && (i === 0 || !this.isWordCharacterAt(contentLowerCase, offset - i - 1))) {
                negativeOffset = i;
                break;
            }
        }
        if (negativeOffset > 0 || offset === 0 || !this.isWordCharacterAt(completion, 0) || !this.isWordCharacterAt(content, offset - 1)) {
            const start = document.positionAt(offset - negativeOffset);
            const end = document.positionAt(offset);
            return {
                newText: completion,
                range: {
                    start,
                    end
                }
            };
        }
        else {
            return undefined;
        }
    }
    isWordCharacterAt(content, index) {
        return this.grammarConfig.nameRegexp.test(content.charAt(index));
    }
}
exports.DefaultCompletionProvider = DefaultCompletionProvider;
//# sourceMappingURL=completion-provider.js.map