/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { CancellationToken, CompletionItem, CompletionList, CompletionParams } from 'vscode-languageserver';
import { TextDocument, TextEdit } from 'vscode-languageserver-textdocument';
import * as ast from '../../grammar/generated/ast';
import { GrammarConfig } from '../../grammar/grammar-config';
import { LangiumCompletionParser } from '../../parser/langium-parser';
import { NameProvider } from '../../references/name-provider';
import { ScopeProvider } from '../../references/scope-provider';
import { LangiumServices } from '../../services';
import { AstNode, AstNodeDescription } from '../../syntax-tree';
import { MaybePromise } from '../../utils/promise-util';
import { LangiumDocument } from '../../workspace/documents';
import { NextFeature } from './follow-element-computation';
export declare type CompletionAcceptor = (value: string | AstNode | AstNodeDescription, item?: Partial<CompletionItem>) => void;
/**
 * Language-specific service for handling completion requests.
 */
export interface CompletionProvider {
    /**
     * Handle a completion request.
     *
     * @throws `OperationCancelled` if cancellation is detected during execution
     * @throws `ResponseError` if an error is detected that should be sent as response to the client
     */
    getCompletion(document: LangiumDocument, params: CompletionParams, cancelToken?: CancellationToken): MaybePromise<CompletionList | undefined>;
}
export declare class DefaultCompletionProvider implements CompletionProvider {
    protected readonly completionParser: LangiumCompletionParser;
    protected readonly scopeProvider: ScopeProvider;
    protected readonly grammar: ast.Grammar;
    protected readonly nameProvider: NameProvider;
    protected readonly grammarConfig: GrammarConfig;
    constructor(services: LangiumServices);
    getCompletion(document: LangiumDocument, params: CompletionParams): Promise<CompletionList | undefined>;
    protected findFeaturesAt(document: TextDocument, offset: number): NextFeature[];
    protected backtrackToAnyToken(text: string, offset: number): number;
    protected backtrackToTokenStart(text: string, offset: number): number;
    protected completionForRule(astNode: AstNode | undefined, rule: ast.AbstractRule, acceptor: CompletionAcceptor): Promise<void>;
    protected completionFor(astNode: AstNode | undefined, next: NextFeature, acceptor: CompletionAcceptor): MaybePromise<void>;
    protected completionForCrossReference(crossRef: NextFeature<ast.CrossReference>, context: AstNode | undefined, acceptor: CompletionAcceptor): MaybePromise<void>;
    /**
     * Override this method to change how reference completion items are created.
     * Most notably useful to change the `kind` property which indicates which icon to display on the client.
     *
     * @param nodeDescription The description of a reference candidate
     * @returns A partial completion item
     */
    protected createReferenceCompletionItem(nodeDescription: AstNodeDescription): Partial<CompletionItem>;
    protected filterCrossReference(_nodeDescription: AstNodeDescription): boolean;
    protected completionForKeyword(keyword: ast.Keyword, context: AstNode | undefined, acceptor: CompletionAcceptor): MaybePromise<void>;
    protected fillCompletionItem(document: TextDocument, offset: number, value: string | AstNode | AstNodeDescription, info: Partial<CompletionItem> | undefined): CompletionItem | undefined;
    protected buildCompletionTextEdit(document: TextDocument, offset: number, completion: string): TextEdit | undefined;
    protected isWordCharacterAt(content: string, index: number): boolean;
}
//# sourceMappingURL=completion-provider.d.ts.map