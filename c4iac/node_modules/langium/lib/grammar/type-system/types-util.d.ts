/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { URI } from 'vscode-uri';
import { References } from '../../references/references';
import { CstNode } from '../../syntax-tree';
import { MultiMap } from '../../utils/collections';
import { AstNodeLocator } from '../../workspace/ast-node-locator';
import { LangiumDocuments } from '../../workspace/documents';
import { AbstractType, Grammar, Interface, ParserRule, Type } from '../generated/ast';
export declare type Property = {
    name: string;
    optional: boolean;
    typeAlternatives: PropertyType[];
};
export declare type PropertyType = {
    types: string[];
    reference: boolean;
    array: boolean;
};
export declare type AstTypes = {
    interfaces: InterfaceType[];
    unions: UnionType[];
};
export declare class UnionType {
    name: string;
    union: PropertyType[];
    reflection: boolean;
    superTypes: Set<string>;
    constructor(name: string, union: PropertyType[], options?: {
        reflection: boolean;
    });
    toString(): string;
}
export declare class InterfaceType {
    name: string;
    superTypes: Set<string>;
    interfaceSuperTypes: string[];
    subTypes: Set<string>;
    containerTypes: Set<string>;
    properties: Property[];
    constructor(name: string, superTypes: string[], properties: Property[]);
    toString(): string;
}
export declare class TypeResolutionError extends Error {
    readonly target: CstNode | undefined;
    constructor(message: string, target: CstNode | undefined);
}
export declare type AstResources = {
    parserRules: Set<ParserRule>;
    datatypeRules: Set<ParserRule>;
    interfaces: Set<Interface>;
    types: Set<Type>;
};
/**
 * Collects all properties of all interface types. Includes super type properties.
 * @param interfaces A topologically sorted array of interfaces.
 */
export declare function collectAllProperties(interfaces: InterfaceType[]): MultiMap<string, Property>;
export declare function collectAllAstResources(grammars: Grammar[], documents?: LangiumDocuments, visited?: Set<URI>, astResources?: AstResources): AstResources;
export declare function propertyTypeArrayToString(alternatives: PropertyType[]): string;
export declare function distinctAndSorted<T>(list: T[], compareFn?: (a: T, b: T) => number): T[];
export declare function typePropertyToString(propertyType: PropertyType): string;
export declare function collectChildrenTypes(interfaceNode: Interface, references: References, langiumDocuments: LangiumDocuments, nodeLocator: AstNodeLocator): Set<Interface | Type>;
export declare function collectSuperTypes(ruleNode: AbstractType): Set<Interface>;
//# sourceMappingURL=types-util.d.ts.map