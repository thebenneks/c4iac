/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { Grammar, Interface, ParserRule, Type } from '../generated/ast';
import { InterfaceType, UnionType } from './types-util';
import { ValidationAcceptor } from '../../validation/validation-registry';
export declare function validateTypesConsistency(grammar: Grammar, accept: ValidationAcceptor): void;
export declare function applyErrorToAssignment(nodes: readonly ParserRule[], accept: ValidationAcceptor): (propertyName: string, errorMessage: string) => void;
declare type TypeOption = UnionType | InterfaceType;
interface InferredInfo {
    inferred: TypeOption;
    nodes: readonly ParserRule[];
}
interface DeclaredInfo {
    declared: TypeOption;
    node: Type | Interface;
}
declare type ValidationResources = Map<string, InferredInfo | DeclaredInfo | InferredInfo & DeclaredInfo>;
export declare function collectValidationResources(grammar: Grammar): ValidationResources;
export declare type InterfaceInfo = {
    type: InterfaceType;
    node: Interface | readonly ParserRule[];
};
export declare function collectAllInterfaces(grammar: Grammar): Map<string, InterfaceInfo>;
export {};
//# sourceMappingURL=type-validator.d.ts.map