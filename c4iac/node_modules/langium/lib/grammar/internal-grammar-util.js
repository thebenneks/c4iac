"use strict";
/******************************************************************************
 * Copyright 2021-2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAssignments = exports.processActionNodeWithNodeDescriptionProvider = exports.processTypeNodeWithNodeLocator = exports.prepareGrammar = exports.resolveTransitiveImports = exports.resolveImport = exports.terminalRegex = exports.getRuleType = exports.getExplicitRuleType = exports.getTypeName = exports.getActionAtElement = exports.isDataTypeRule = exports.isArrayOperator = exports.isArrayCardinality = exports.isOptionalCardinality = void 0;
const ast = __importStar(require("../grammar/generated/ast"));
const vscode_uri_1 = require("vscode-uri");
const ast_util_1 = require("../utils/ast-util");
const collections_1 = require("../utils/collections");
const types_util_1 = require("./type-system/types-util");
const regex_util_1 = require("../utils/regex-util");
function isOptionalCardinality(cardinality) {
    return cardinality === '?' || cardinality === '*';
}
exports.isOptionalCardinality = isOptionalCardinality;
function isArrayCardinality(cardinality) {
    return cardinality === '*' || cardinality === '+';
}
exports.isArrayCardinality = isArrayCardinality;
function isArrayOperator(operator) {
    return operator === '+=';
}
exports.isArrayOperator = isArrayOperator;
/**
 * Determines whether the given parser rule is a _data type rule_, meaning that it has a
 * primitive return type like `number`, `boolean`, etc.
 */
function isDataTypeRule(rule) {
    return isDataTypeRuleInternal(rule, new Set());
}
exports.isDataTypeRule = isDataTypeRule;
function isDataTypeRuleInternal(rule, visited) {
    if (visited.has(rule)) {
        return true;
    }
    visited.add(rule);
    for (const node of (0, ast_util_1.streamAllContents)(rule)) {
        if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {
            if (!isDataTypeRuleInternal(node.rule.ref, visited)) {
                return false;
            }
        }
        else if (ast.isAssignment(node)) {
            return false;
        }
        else if (ast.isAction(node)) {
            return false;
        }
    }
    return true;
}
function getActionAtElement(element) {
    const parent = element.$container;
    if (ast.isGroup(parent)) {
        const elements = parent.elements;
        const index = elements.indexOf(element);
        for (let i = index - 1; i >= 0; i--) {
            const item = elements[i];
            if (ast.isAction(item)) {
                return item;
            }
            else {
                const action = (0, ast_util_1.streamAllContents)(elements[i]).find(ast.isAction);
                if (action) {
                    return action;
                }
            }
        }
    }
    if (ast.isAbstractElement(parent)) {
        return getActionAtElement(parent);
    }
    else {
        return undefined;
    }
}
exports.getActionAtElement = getActionAtElement;
function getTypeName(type) {
    var _a;
    if (ast.isParserRule(type)) {
        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;
    }
    else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {
        return type.name;
    }
    else if (ast.isAction(type)) {
        const actionType = getActionType(type);
        if (actionType) {
            return actionType;
        }
    }
    else if (ast.isInferredType(type)) {
        return type.name;
    }
    throw new types_util_1.TypeResolutionError('Cannot get name of Unknown Type', type.$cstNode);
}
exports.getTypeName = getTypeName;
function getExplicitRuleType(rule) {
    if (rule.inferredType) {
        return rule.inferredType.name;
    }
    else if (rule.dataType) {
        return rule.dataType;
    }
    else if (rule.returnType) {
        const refType = rule.returnType.ref;
        if (refType) {
            // check if we need to check Action as return type
            if (ast.isParserRule(refType)) {
                return refType.name;
            }
            else if (ast.isInterface(refType) || ast.isType(refType)) {
                return refType.name;
            }
        }
    }
    return undefined;
}
exports.getExplicitRuleType = getExplicitRuleType;
function getActionType(action) {
    var _a;
    if (action.inferredType) {
        return action.inferredType.name;
    }
    else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {
        return getTypeName(action.type.ref);
    }
    return undefined; // not inferring and not referencing a valid type
}
function getRuleType(rule) {
    var _a, _b, _c;
    if (ast.isTerminalRule(rule)) {
        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';
    }
    else {
        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;
    }
}
exports.getRuleType = getRuleType;
function terminalRegex(terminalRule) {
    return abstractElementToRegex(terminalRule.definition);
}
exports.terminalRegex = terminalRegex;
// Using [\s\S]* allows to match everything, compared to . which doesn't match line terminators
const WILDCARD = /[\s\S]/.source;
function abstractElementToRegex(element) {
    if (ast.isTerminalAlternatives(element)) {
        return terminalAlternativesToRegex(element);
    }
    else if (ast.isTerminalGroup(element)) {
        return terminalGroupToRegex(element);
    }
    else if (ast.isCharacterRange(element)) {
        return characterRangeToRegex(element);
    }
    else if (ast.isTerminalRuleCall(element)) {
        const rule = element.rule.ref;
        if (!rule) {
            throw new Error('Missing rule reference.');
        }
        return withCardinality(terminalRegex(rule), element.cardinality);
    }
    else if (ast.isNegatedToken(element)) {
        return negateTokenToRegex(element);
    }
    else if (ast.isUntilToken(element)) {
        return untilTokenToRegex(element);
    }
    else if (ast.isRegexToken(element)) {
        return withCardinality(element.regex, element.cardinality, false);
    }
    else if (ast.isWildcard(element)) {
        return withCardinality(WILDCARD, element.cardinality);
    }
    else {
        throw new Error('Invalid terminal element.');
    }
}
function terminalAlternativesToRegex(alternatives) {
    return withCardinality(alternatives.elements.map(abstractElementToRegex).join('|'), alternatives.cardinality);
}
function terminalGroupToRegex(group) {
    return withCardinality(group.elements.map(abstractElementToRegex).join(''), group.cardinality);
}
function untilTokenToRegex(until) {
    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, until.cardinality);
}
function negateTokenToRegex(negate) {
    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, negate.cardinality);
}
function characterRangeToRegex(range) {
    if (range.right) {
        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, range.cardinality, false);
    }
    return withCardinality(keywordToRegex(range.left), range.cardinality, false);
}
function keywordToRegex(keyword) {
    return (0, regex_util_1.escapeRegExp)(keyword.value);
}
function withCardinality(regex, cardinality, wrap = true) {
    if (wrap) {
        regex = `(${regex})`;
    }
    if (cardinality) {
        return `${regex}${cardinality}`;
    }
    return regex;
}
function resolveImport(documents, imp) {
    if (imp.path === undefined || imp.path.length === 0) {
        return undefined;
    }
    const uri = vscode_uri_1.Utils.dirname((0, ast_util_1.getDocument)(imp).uri);
    let grammarPath = imp.path;
    if (!grammarPath.endsWith('.langium')) {
        grammarPath += '.langium';
    }
    const resolvedUri = vscode_uri_1.Utils.resolvePath(uri, grammarPath);
    try {
        const resolvedDocument = documents.getOrCreateDocument(resolvedUri);
        const node = resolvedDocument.parseResult.value;
        if (ast.isGrammar(node)) {
            return node;
        }
    }
    catch (_a) {
        // NOOP
    }
    return undefined;
}
exports.resolveImport = resolveImport;
function resolveTransitiveImports(documents, grammar) {
    if (ast.isGrammarImport(grammar)) {
        const resolvedGrammar = resolveImport(documents, grammar);
        if (resolvedGrammar) {
            const transitiveGrammars = resolveTransitiveImportsInternal(documents, resolvedGrammar);
            transitiveGrammars.push(resolvedGrammar);
            return transitiveGrammars;
        }
        return [];
    }
    else {
        return resolveTransitiveImportsInternal(documents, grammar);
    }
}
exports.resolveTransitiveImports = resolveTransitiveImports;
function resolveTransitiveImportsInternal(documents, grammar, initialGrammar = grammar, visited = new Set(), grammars = new Set()) {
    const doc = (0, ast_util_1.getDocument)(grammar);
    if (initialGrammar !== grammar) {
        grammars.add(grammar);
    }
    if (!visited.has(doc.uri)) {
        visited.add(doc.uri);
        for (const imp of grammar.imports) {
            const importedGrammar = resolveImport(documents, imp);
            if (importedGrammar) {
                resolveTransitiveImportsInternal(documents, importedGrammar, initialGrammar, visited, grammars);
            }
        }
    }
    return Array.from(grammars);
}
function prepareGrammar(services, grammar) {
    const mutableGrammar = grammar;
    const document = services.shared.workspace.LangiumDocumentFactory.fromModel(grammar, vscode_uri_1.URI.parse('memory://grammar.langium'));
    mutableGrammar.$document = document;
    document.precomputedScopes = computeGrammarScope(services, grammar);
    return grammar;
}
exports.prepareGrammar = prepareGrammar;
function computeGrammarScope(services, grammar) {
    const nameProvider = services.references.NameProvider;
    const descriptions = services.workspace.AstNodeDescriptionProvider;
    const document = (0, ast_util_1.getDocument)(grammar);
    const scopes = new collections_1.MultiMap();
    const processTypeNode = processTypeNodeWithNodeLocator(services.workspace.AstNodeLocator);
    const processActionNode = processActionNodeWithNodeDescriptionProvider(descriptions);
    for (const node of (0, ast_util_1.streamAllContents)(grammar)) {
        if (ast.isReturnType(node))
            continue;
        processActionNode(node, document, scopes);
        processTypeNode(node, document, scopes);
        const container = node.$container;
        if (container) {
            const name = nameProvider.getName(node);
            if (name) {
                scopes.add(container, descriptions.createDescription(node, name, document));
            }
        }
    }
    return scopes;
}
/**
 * Add synthetic Interface in case of explicitly or implicitly inferred type:<br>
 * cases: `ParserRule: ...;` or `ParserRule infers Type: ...;`
 * @param astNodeLocator AstNodeLocator
 * @returns scope populator
 */
function processTypeNodeWithNodeLocator(astNodeLocator) {
    return (node, document, scopes) => {
        var _a;
        const container = node.$container;
        if (container && ast.isParserRule(node) && !node.returnType && !node.dataType) {
            const typeNode = (_a = node.inferredType) !== null && _a !== void 0 ? _a : node;
            scopes.add(container, {
                node: typeNode,
                name: typeNode.name,
                type: 'Interface',
                documentUri: document.uri,
                path: astNodeLocator.getAstNodePath(typeNode)
            });
        }
    };
}
exports.processTypeNodeWithNodeLocator = processTypeNodeWithNodeLocator;
/**
 * Add synthetic Interface in case of explicitly inferred type:
 *
 * case: `{infer Action}`
 */
function processActionNodeWithNodeDescriptionProvider(descriptions) {
    return (node, document, scopes) => {
        const container = (0, ast_util_1.findRootNode)(node);
        if (container && ast.isAction(node) && node.inferredType) {
            const typeName = getActionType(node);
            if (typeName) {
                scopes.add(container, descriptions.createDescription(node, typeName, document));
            }
        }
    };
}
exports.processActionNodeWithNodeDescriptionProvider = processActionNodeWithNodeDescriptionProvider;
function extractAssignments(element) {
    if (ast.isAssignment(element)) {
        return [element];
    }
    if (ast.isAlternatives(element) || ast.isGroup(element) || ast.isUnorderedGroup(element)) {
        return element.elements.flatMap(e => extractAssignments(e));
    }
    return [];
}
exports.extractAssignments = extractAssignments;
//# sourceMappingURL=internal-grammar-util.js.map