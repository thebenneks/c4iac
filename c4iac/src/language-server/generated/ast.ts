/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type QualifiedName = string;

export type RelationType = North | South | West;

export const RelationType = 'RelationType';

export function isRelationType(item: unknown): item is RelationType {
    return reflection.isInstance(item, RelationType);
}

export interface Container extends AstNode {
    readonly $container: SoftwareSystem;
    description: string
    easts: Array<East>
    name: string
    relationships: Array<RelationShip>
    technology: string
    version: string
}

export const Container = 'Container';

export function isContainer(item: unknown): item is Container {
    return reflection.isInstance(item, Container);
}

export interface East extends AstNode {
    readonly $container: Container;
    name: string
    port: number
}

export const East = 'East';

export function isEast(item: unknown): item is East {
    return reflection.isInstance(item, East);
}

export interface Greeting extends AstNode {
    readonly $container: Model;
    person: Reference<Person>
}

export const Greeting = 'Greeting';

export function isGreeting(item: unknown): item is Greeting {
    return reflection.isInstance(item, Greeting);
}

export interface Model extends AstNode {
    greetings: Array<Greeting>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface North extends AstNode {
    readonly $container: RelationShip;
    name: string
    person: Reference<Person>
    port: number
}

export const North = 'North';

export function isNorth(item: unknown): item is North {
    return reflection.isInstance(item, North);
}

export interface Person extends AstNode {
    readonly $container: SoftwareSystem;
    description: string
    location: string
    name: string
}

export const Person = 'Person';

export function isPerson(item: unknown): item is Person {
    return reflection.isInstance(item, Person);
}

export interface RelationShip extends AstNode {
    readonly $container: Container;
    description: string
    name: string
    relationtype: RelationType
}

export const RelationShip = 'RelationShip';

export function isRelationShip(item: unknown): item is RelationShip {
    return reflection.isInstance(item, RelationShip);
}

export interface SoftwareSystem extends AstNode {
    containers: Array<Container>
    description: string
    location: string
    name: string
    persons: Array<Person>
    version: string
}

export const SoftwareSystem = 'SoftwareSystem';

export function isSoftwareSystem(item: unknown): item is SoftwareSystem {
    return reflection.isInstance(item, SoftwareSystem);
}

export interface South extends AstNode {
    readonly $container: RelationShip;
    name: string
    port: number
    to: Reference<SoftwareSystem>
}

export const South = 'South';

export function isSouth(item: unknown): item is South {
    return reflection.isInstance(item, South);
}

export interface West extends AstNode {
    readonly $container: RelationShip;
    eastingress: Reference<Container>
    name: string
}

export const West = 'West';

export function isWest(item: unknown): item is West {
    return reflection.isInstance(item, West);
}

export type C4IacAstType = 'Container' | 'East' | 'Greeting' | 'Model' | 'North' | 'Person' | 'RelationShip' | 'RelationType' | 'SoftwareSystem' | 'South' | 'West';

export class C4IacAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Container', 'East', 'Greeting', 'Model', 'North', 'Person', 'RelationShip', 'RelationType', 'SoftwareSystem', 'South', 'West'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case North:
            case South:
            case West: {
                return this.isSubtype(RelationType, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Greeting:person': {
                return Person;
            }
            case 'North:person': {
                return Person;
            }
            case 'South:to': {
                return SoftwareSystem;
            }
            case 'West:eastingress': {
                return Container;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Container': {
                return {
                    name: 'Container',
                    mandatory: [
                        { name: 'easts', type: 'array' },
                        { name: 'relationships', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'greetings', type: 'array' }
                    ]
                };
            }
            case 'SoftwareSystem': {
                return {
                    name: 'SoftwareSystem',
                    mandatory: [
                        { name: 'containers', type: 'array' },
                        { name: 'persons', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new C4IacAstReflection();
